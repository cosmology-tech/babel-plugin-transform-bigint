// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BigInt.asUintN(64, a), BigInt.asIntN(64, a) 1`] = `
"import JSBI from \\"./jsbi.mjs\\";
const a = JSBI.BigInt(1);
console.log(JSBI.asUintN(64, a));
console.log(JSBI.asIntN(64, a));"
`;

exports[`BigInt.asUintN(n, a) is replaced 1`] = `
"import JSBI from \\"./jsbi.mjs\\";
const g = JSBI.BigInt(1);
JSBI.asUintN(10, g);"
`;

exports[`CallExpression's type 1`] = `
"var maybeJSBI = {
  toNumber: function toNumber(a) {
    return typeof a === \\"object\\" ? JSBI.toNumber(a) : Number(a);
  },
  add: function add(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.add(a, b) : a + b;
  },
  subtract: function subtract(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.subtract(a, b) : a - b;
  },
  multiply: function multiply(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.multiply(a, b) : a * b;
  },
  divide: function divide(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.divide(a, b) : a / b;
  },
  remainder: function remainder(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.remainder(a, b) : a % b;
  },
  exponentiate: function exponentiate(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.exponentiate(a, b) : typeof a === \\"bigint\\" && typeof b === \\"bigint\\" ? new Function(\\"a\\", \\"b\\", \\"return a**b\\")(a, b) : Math.pow(a, b);
  },
  leftShift: function leftShift(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.leftShift(a, b) : a << b;
  },
  signedRightShift: function signedRightShift(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.signedRightShift(a, b) : a >> b;
  },
  bitwiseAnd: function bitwiseAnd(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.bitwiseAnd(a, b) : a & b;
  },
  bitwiseOr: function bitwiseOr(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.bitwiseOr(a, b) : a | b;
  },
  bitwiseXor: function bitwiseXor(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.bitwiseXor(a, b) : a ^ b;
  },
  lessThan: function lessThan(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.lessThan(a, b) : a < b;
  },
  greaterThan: function greaterThan(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.greaterThan(a, b) : a > b;
  },
  lessThanOrEqual: function lessThanOrEqual(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.lessThanOrEqual(a, b) : a <= b;
  },
  greaterThanOrEqual: function greaterThanOrEqual(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.greaterThanOrEqual(a, b) : a >= b;
  },
  equal: function equal(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.equal(a, b) : a === b;
  },
  notEqual: function notEqual(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.notEqual(a, b) : a !== b;
  },
  unaryMinus: function unaryMinus(a) {
    return typeof a === \\"object\\" ? JSBI.unaryMinus(a) : -a;
  },
  bitwiseNot: function bitwiseNot(a) {
    return typeof a === \\"object\\" ? JSBI.bitwiseNot(a) : ~a;
  }
};
import JSBI from \\"./jsbi.mjs\\";
function n() {
  return 3;
}
console.log(n() * n());
function b() {
  return JSBI.BigInt(3);
}
console.log(JSBI.multiply(b(), b()));
function nb() {
  if (Math.random() < 0.5) {
    return 3;
  }
  return JSBI.BigInt(3);
}
console.log(maybeJSBI.multiply(nb(), nb()));"
`;

exports[`default values 1`] = `
"var maybeJSBI = {
  toNumber: function toNumber(a) {
    return typeof a === \\"object\\" ? JSBI.toNumber(a) : Number(a);
  },
  add: function add(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.add(a, b) : a + b;
  },
  subtract: function subtract(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.subtract(a, b) : a - b;
  },
  multiply: function multiply(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.multiply(a, b) : a * b;
  },
  divide: function divide(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.divide(a, b) : a / b;
  },
  remainder: function remainder(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.remainder(a, b) : a % b;
  },
  exponentiate: function exponentiate(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.exponentiate(a, b) : typeof a === \\"bigint\\" && typeof b === \\"bigint\\" ? new Function(\\"a\\", \\"b\\", \\"return a**b\\")(a, b) : Math.pow(a, b);
  },
  leftShift: function leftShift(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.leftShift(a, b) : a << b;
  },
  signedRightShift: function signedRightShift(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.signedRightShift(a, b) : a >> b;
  },
  bitwiseAnd: function bitwiseAnd(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.bitwiseAnd(a, b) : a & b;
  },
  bitwiseOr: function bitwiseOr(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.bitwiseOr(a, b) : a | b;
  },
  bitwiseXor: function bitwiseXor(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.bitwiseXor(a, b) : a ^ b;
  },
  lessThan: function lessThan(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.lessThan(a, b) : a < b;
  },
  greaterThan: function greaterThan(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.greaterThan(a, b) : a > b;
  },
  lessThanOrEqual: function lessThanOrEqual(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.lessThanOrEqual(a, b) : a <= b;
  },
  greaterThanOrEqual: function greaterThanOrEqual(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.greaterThanOrEqual(a, b) : a >= b;
  },
  equal: function equal(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.equal(a, b) : a === b;
  },
  notEqual: function notEqual(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.notEqual(a, b) : a !== b;
  },
  unaryMinus: function unaryMinus(a) {
    return typeof a === \\"object\\" ? JSBI.unaryMinus(a) : -a;
  },
  bitwiseNot: function bitwiseNot(a) {
    return typeof a === \\"object\\" ? JSBI.bitwiseNot(a) : ~a;
  }
};
import JSBI from \\"./jsbi.mjs\\";
function f(y = unknown(), z = maybeJSBI.multiply(y, y)) {
  if (!(y instanceof JSBI)) {
    throw new RangeError();
  }
  return maybeJSBI.multiply(y, y);
}"
`;

exports[`internal bigint function 1`] = `
"import JSBI from \\"./jsbi.mjs\\";
function f(a) {
  return JSBI.multiply(a, a);
}
console.log(f(JSBI.BigInt(3)));"
`;

exports[`internal number function 1`] = `
"import JSBI from \\"./jsbi.mjs\\";
function f(a) {
  return a * a;
}
console.log(f(3));"
`;

exports[`it does not replace expression for a mutable variable 1`] = `
"import JSBI from \\"./jsbi.mjs\\";
function f() {
  for (let i = 0; i < 10; i += 1) {
    console.log(i * i);
  }
}"
`;

exports[`it does not replace expression for a mutable variable2 1`] = `
"import JSBI from \\"./jsbi.mjs\\";
function f() {
  let i = 1;
  i = -i;
  return i * i;
}"
`;

exports[`it works with AssignmentExpressions 1`] = `
"var _x, _x2, _x3, _x4, _y;
import JSBI from \\"./jsbi.mjs\\";
const o = {};
o.x = {};
o.x.y = JSBI.BigInt(1);
o.x.yz = JSBI.BigInt(1);
const y = 'y';
const z = 'z';
const b = JSBI.BigInt(1);
const array = [JSBI.BigInt(1)];
let i = 1;
_x = o.x, _x.y = JSBI.add(_x.y, b);
_x2 = o.x, _x2['y'] = JSBI.add(_x2['y'], b);
_x3 = o.x, _x3[y] = JSBI.add(_x3[y], b);
_x4 = o.x, _y = y + z, _x4[_y] = JSBI.add(_x4[_y], b);
array[i] = JSBI.add(array[i], b);
array[0] = JSBI.add(array[0], b);"
`;

exports[`maybeJSBI 1`] = `
"import JSBI from \\"./jsbi.mjs\\";
function f(a) {
  return JSBI.toNumber(JSBI.asUintN(64, a));
}
console.log(f(JSBI.BigInt(3)));"
`;

exports[`maybeJSBI avoided for a FunctionExpression 1`] = `
"import JSBI from \\"./jsbi.mjs\\";
const f = function (x) {
  if (typeof x !== 'number') {
    throw new RangeError();
  }
  return x * x;
};"
`;

exports[`maybeJSBI2 1`] = `
"import JSBI from \\"./jsbi.mjs\\";
function f(a) {
  return Number(JSBI.lessThan(JSBI.BigInt(a), JSBI.BigInt(0)));
}
console.log(f(JSBI.BigInt(3)));"
`;

exports[`maybeJSBI2a 1`] = `
"import JSBI from \\"./jsbi.mjs\\";
function f(a) {
  const x = JSBI.lessThan(JSBI.BigInt(a), JSBI.BigInt(0));
  return Number(x);
}
console.log(f(JSBI.BigInt(3)));"
`;

exports[`maybeJSBI3 1`] = `
"import JSBI from \\"./jsbi.mjs\\";
function f(a) {
  return Math.floor(a + a);
}"
`;

exports[`non-strict comparisions are not changed 1`] = `
"import JSBI from \\"./jsbi.mjs\\";
const g = JSBI.BigInt(1);
if (g == 1) {
  console.log(g);
}
if (g != 1) {
  console.log(g);
}
if (g < 1) {
  console.log(g);
}
if (g > 1) {
  console.log(g);
}
if (g <= 1) {
  console.log(g);
}
if (g >= 1) {
  console.log(g);
}"
`;

exports[`options jsbiLib ./jsbi.js 1`] = `
"import JSBI from \\"./jsbi.js\\";
let g1 = 1;
g1 = JSBI.BigInt(1);
if (JSBI.equal(g1, JSBI.BigInt(1))) {
  console.log(g1);
}"
`;

exports[`options jsbiLib jsbi 1`] = `
"import JSBI from \\"jsbi\\";
let g1 = 1;
g1 = JSBI.BigInt(1);
if (JSBI.equal(g1, JSBI.BigInt(1))) {
  console.log(g1);
}"
`;

exports[`sometimes type of conditional expression can be determined as JSBI 1`] = `
"import JSBI from \\"./jsbi.mjs\\";
function f(a) {
  const b = JSBI.equal(JSBI.remainder(a, JSBI.BigInt(3)), JSBI.BigInt(0)) ? JSBI.BigInt(1) : JSBI.BigInt(3);
  return JSBI.multiply(b, b);
}
export default f;"
`;

exports[`typeof type guard (see https://www.typescriptlang.org/docs/handbook/2/narrowing.html#typeof-type-guards) 1`] = `
"var maybeJSBI = {
  toNumber: function toNumber(a) {
    return typeof a === \\"object\\" ? JSBI.toNumber(a) : Number(a);
  },
  add: function add(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.add(a, b) : a + b;
  },
  subtract: function subtract(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.subtract(a, b) : a - b;
  },
  multiply: function multiply(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.multiply(a, b) : a * b;
  },
  divide: function divide(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.divide(a, b) : a / b;
  },
  remainder: function remainder(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.remainder(a, b) : a % b;
  },
  exponentiate: function exponentiate(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.exponentiate(a, b) : typeof a === \\"bigint\\" && typeof b === \\"bigint\\" ? new Function(\\"a\\", \\"b\\", \\"return a**b\\")(a, b) : Math.pow(a, b);
  },
  leftShift: function leftShift(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.leftShift(a, b) : a << b;
  },
  signedRightShift: function signedRightShift(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.signedRightShift(a, b) : a >> b;
  },
  bitwiseAnd: function bitwiseAnd(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.bitwiseAnd(a, b) : a & b;
  },
  bitwiseOr: function bitwiseOr(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.bitwiseOr(a, b) : a | b;
  },
  bitwiseXor: function bitwiseXor(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.bitwiseXor(a, b) : a ^ b;
  },
  lessThan: function lessThan(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.lessThan(a, b) : a < b;
  },
  greaterThan: function greaterThan(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.greaterThan(a, b) : a > b;
  },
  lessThanOrEqual: function lessThanOrEqual(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.lessThanOrEqual(a, b) : a <= b;
  },
  greaterThanOrEqual: function greaterThanOrEqual(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.greaterThanOrEqual(a, b) : a >= b;
  },
  equal: function equal(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.equal(a, b) : a === b;
  },
  notEqual: function notEqual(a, b) {
    return typeof a === \\"object\\" && typeof b === \\"object\\" ? JSBI.notEqual(a, b) : a !== b;
  },
  unaryMinus: function unaryMinus(a) {
    return typeof a === \\"object\\" ? JSBI.unaryMinus(a) : -a;
  },
  bitwiseNot: function bitwiseNot(a) {
    return typeof a === \\"object\\" ? JSBI.bitwiseNot(a) : ~a;
  }
};
import JSBI from \\"./jsbi.mjs\\";
function f1(a) {
  if (!(a instanceof JSBI)) {
    throw new RangeError();
  }
  return JSBI.multiply(a, a);
}
function f2(a, b) {
  if (!(a instanceof JSBI) || !(b instanceof JSBI)) {
    throw new RangeError();
  }
  return JSBI.multiply(a, b);
}
function f3(a) {
  if (typeof a !== 'number') {
    throw new RangeError();
  }
  return a * a;
}
function f4(a, b) {
  if (typeof a !== 'number' || typeof b !== 'number') {
    throw new RangeError();
  }
  return a * b;
}
function f5(a) {
  if (!(a instanceof JSBI)) {
    void 0;
  }
  return maybeJSBI.multiply(a, a);
}
export { f1, f2, f3, f4, f5 };"
`;

exports[`works 1`] = `
"import JSBI from \\"./jsbi.mjs\\";
function f() {
  const x = JSBI.BigInt(1);
  return JSBI.add(x, x);
}"
`;

exports[`works when type of variable is changed 1`] = `
"import JSBI from \\"./jsbi.mjs\\";
let g1 = 1;
g1 = JSBI.BigInt(1);
if (JSBI.equal(g1, JSBI.BigInt(1))) {
  console.log(g1);
}"
`;
